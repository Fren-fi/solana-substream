// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PumpfunAmmBlockEvents {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<PumpfunAmmTransactionEvents>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PumpfunAmmTransactionEvents {
    #[prost(string, tag="1")]
    pub signature: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub events: ::prost::alloc::vec::Vec<PumpfunAmmEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PumpfunAmmEvent {
    #[prost(oneof="pumpfun_amm_event::Event", tags="1, 2, 3")]
    pub event: ::core::option::Option<pumpfun_amm_event::Event>,
}
/// Nested message and enum types in `PumpfunAmmEvent`.
pub mod pumpfun_amm_event {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag="1")]
        Liquidity(super::LiquidityEvent),
        #[prost(message, tag="2")]
        Swap(super::SwapEvent),
        #[prost(message, tag="3")]
        CreatePool(super::CreatePoolEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePoolEvent {
    #[prost(string, tag="1")]
    pub pool: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub creator: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub base_mint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub quote_mint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag="5")]
    pub base_mint_decimals: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag="6")]
    pub quote_mint_decimals: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag="7")]
    pub base_amount_in: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="8")]
    pub quote_amount_in: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="9")]
    pub pool_base_amount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="10")]
    pub pool_quote_amount: ::core::option::Option<u64>,
    #[prost(string, optional, tag="11")]
    pub coin_creator: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag="12")]
    pub timestamp: ::core::option::Option<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityEvent {
    #[prost(string, tag="1")]
    pub pool: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user: ::prost::alloc::string::String,
    #[prost(bool, tag="3")]
    pub is_add: bool,
    #[prost(uint64, optional, tag="4")]
    pub pool_base_token_reserves: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="5")]
    pub pool_quote_token_reserves: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapEvent {
    #[prost(string, tag="1")]
    pub user: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub mint: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub bonding_curve: ::prost::alloc::string::String,
    #[prost(uint64, tag="4")]
    pub min_quote_amount_out: u64,
    #[prost(uint64, tag="5")]
    pub base_amount_in: u64,
    #[prost(string, tag="6")]
    pub direction: ::prost::alloc::string::String,
    #[prost(bool, tag="7")]
    pub is_buy: bool,
    #[prost(uint64, optional, tag="8")]
    pub virtual_sol_reserves: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="9")]
    pub virtual_token_reserves: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="10")]
    pub real_sol_reserves: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="11")]
    pub real_token_reserves: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="12")]
    pub user_token_pre_balance: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="13")]
    pub protocol_fee: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="14")]
    pub coin_creator_fee: ::core::option::Option<u64>,
    #[prost(int64, optional, tag="15")]
    pub timestamp: ::core::option::Option<i64>,
}
// @@protoc_insertion_point(module)
